{
  "hash": "058abd8dbeb67d6321730c4ecb45064c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multicollinearity\"\nauthor: \"Prof. Maria Tackett\"\ndate: \"2025-02-27\"\ndate-format: \"MMM DD, YYYY\"\nfooter: \"[🔗 STA 210 - Spring 2025](https://sta210-sp25.netlify.app)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs: \n    theme: slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    include-before: [ '<script type=\"text/x-mathjax-config\">MathJax.Hub.Config({tex2jax: {enableAssistiveMml: false}});</script>']\n  html: \n    output-file: 13-multicollinearity-notes.html\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:      \n    width: 200\nbibliography: references.bib\n---\n\n\n\n\n## Announcements\n\n-   Exam corrections (optional) due Tuesday, March 4 at 11:59pm [on Canvas](https://canvas.duke.edu/courses/47067/assignments/220985)\n\n-   Project proposal due TODAY at 11:59pm\n\n-   Team Feedback (email from Teammates) due Tuesday, March 4 at 11:59pm\n\n-   DataFest: April 4 - 6 - <https://dukestatsci.github.io/datafest/>\n\n## Computing set up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)  \nlibrary(tidymodels)  \nlibrary(knitr)       \nlibrary(patchwork)\nlibrary(GGally)   # for pairwise plot matrix\nlibrary(corrplot) # for correlation matrix\n\n# set default theme in ggplot2\nggplot2::theme_set(ggplot2::theme_bw())\n```\n:::\n\n\n\n\n## Topics\n\n-   Multicollinearity\n\n    -   Definition\n\n    -   How it impacts the model\n\n    -   How to detect it\n\n    -   What to do about it\n\n## Data: Trail users {.midi}\n\n-   The Pioneer Valley Planning Commission (PVPC) collected data at the beginning a trail in Florence, MA for ninety days from April 5, 2005 to November 15, 2005\n-   Data collectors set up a laser sensor, with breaks in the laser beam recording when a rail-trail user passed the data collection station.\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  volume hightemp avgtemp season cloudcover precip day_type\n   <dbl>    <dbl>   <dbl> <chr>       <dbl>  <dbl> <chr>   \n1    501       83    66.5 Summer       7.60  0     Weekday \n2    419       73    61   Summer       6.30  0.290 Weekday \n3    397       74    63   Spring       7.5   0.320 Weekday \n4    385       95    78   Summer       2.60  0     Weekend \n5    200       44    48   Spring      10     0.140 Weekday \n```\n\n\n:::\n:::\n\n\n\n\nSource: [Pioneer Valley Planning Commission](http://www.fvgreenway.org/pdfs/Northampton-Bikepath-Volume-Counts%20_05_LTA.pdf) via the **mosaicData** package.\n\n## Variables\n\n**Outcome**:\n\n-   `volume` estimated number of trail users that day (number of breaks recorded)\n\n**Predictors**\n\n-   `hightemp` daily high temperature (in degrees Fahrenheit)\n\n-   `avgtemp` average of daily low and daily high temperature (in degrees Fahrenheit)\n\n-   `season` one of “Fall”, “Spring”, or “Summer”\n\n-   `precip` measure of precipitation (in inches)\n\n## EDA: Relationship between predictors\n\nWe can create a pairwise plot matrix using the `ggpairs` function from the **GGally** R package\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrail_trail |>\n  select(hightemp, avgtemp, season, precip) |>\n  ggpairs()\n```\n:::\n\n\n\n\n## EDA: Relationship between predictors {.midi}\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](13-multicollinearity_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n## EDA: Correlation matrix\n\nWe can. use `corrplot()` in the **corrplot** R package to make a matrix of pairwise correlations between [quantitative]{.underline} predictors\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrelations <- rail_trail |>\n  select(hightemp, avgtemp, precip) |>\n  cor()\n\ncorrplot(correlations, method = \"number\")\n```\n:::\n\n\n\n\n## EDA: Correlation matrix\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](13-multicollinearity_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n::: question\nWhat might be a potential concern with a model that uses high temperature, average temperature, season, and precipitation to predict volume?\n:::\n\n# Multicollinearity\n\n## Multicollinearity\n\n::: incremental\n-   Ideally the predictors are completely independent of one another\n\n-   In practice, there is typically some relationship between predictors but it is often not a major issue in the model\n\n-   If there predictors are perfectly correlated, we cannot find values of $\\hat{\\beta}_0, \\hat{\\beta}_1, \\ldots, \\hat{\\beta}_p$ that best fit the model\n\n-   If predictors are strongly correlated, we can find $\\hat{\\beta}_0, \\hat{\\beta}_1, \\ldots, \\hat{\\beta}_p$, but there may be other issues with the model\n\n-   **Multicollinearity**: predictors are strongly correlated with each other\n:::\n\n::: aside\nSource: @montgomery2021introduction\n:::\n\n## Sources of multicollinearity\n\n::: incremental\n-   Data collection method - only sample from a subspace of the region of predictors\n\n-   Constraints in the population - e.g., predictors family income and size of house\n\n-   Choice of model - e.g., adding high order or interaction terms to the model\n\n-   Overdefined model - have more predictors than observations\n:::\n\n## Example: Issue with multicollinearity\n\nLet's assume the true population regression equation is $y = 3 + 4x$\n\n. . .\n\nSuppose we try estimating that equation using a model with variables $x$ and $z = x/10$\n\n$$\n\\begin{aligned}\\hat{y}&= \\hat{\\beta}_0 + \\hat{\\beta}_1x  + \\hat{\\beta}_2z\\\\\n&= \\hat{\\beta}_0 + \\hat{\\beta}_1x  + \\hat{\\beta}_2\\frac{x}{10}\\\\\n&= \\hat{\\beta}_0 + \\bigg(\\hat{\\beta}_1 + \\frac{\\hat{\\beta}_2}{10}\\bigg)x\n\\end{aligned}\n$$\n\n## Example: Issue with mulitcollinearity\n\n$$\\hat{y} = \\hat{\\beta}_0 + \\bigg(\\hat{\\beta}_1 + \\frac{\\hat{\\beta}_2}{10}\\bigg)x$$\n\n-   We can set $\\hat{\\beta}_1$ and $\\hat{\\beta}_2$ to any two numbers such that $\\hat{\\beta}_1 + \\frac{\\hat{\\beta}_2}{10} = 4$\n\n-   Therefore, we are unable to choose the \"best\" combination of $\\hat{\\beta}_1$ and $\\hat{\\beta}_2$\n\n## Variance inflation factor {.midi}\n\n-   The **variance inflation factor (VIF)** is a measure of the collinearity between predictor $x_j$ and all other predictors in the model\n\n$$\nVIF_{j} = \\frac{1}{1 - R^2_j}\n$$\n\nwhere $R^2_j$ is the proportion of variation in $x_j$ that is explained by all the other predictors\n\n## Detecting multicollinearity\n\n-   Common practice uses threshold $VIF > 10$ as indication of concerning multicollinearity (some say VIF \\> 5 is worth investigation)\n\n-   Variables with similar values of VIF are typically the ones correlated with each other\n\n-   Use the `vif()` function in the **rms** R package to calculate VIF\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rms)\n\ntrail_fit <- lm(volume ~ hightemp + avgtemp + precip, data = rail_trail)\n\nvif(trail_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nhightemp  avgtemp   precip \n7.161882 7.597154 1.193431 \n```\n\n\n:::\n:::\n\n\n\n\n# Application exercise\n\n::: appex\n📋 [sta210-sp25.netlify.app/ae/ae-08-multicollinearity.html](../ae/ae-08-multicollinearity.html)\n\nPart 1\n:::\n\n## How multicollinearity impacts model {.midi}\n\n::: incremental\n-   When we have perfect collinearities, we are unable to get estimates for the coefficients\n\n-   When we have almost perfect collinearities (i.e. highly correlated predictor variables), the standard errors for our regression coefficients inflate\n\n    -   In other words, we lose precision in our estimates of the regression coefficients\n\n    -   This impedes our ability to use the model for inference\n\n-   It is also difficult to interpret the model coefficients\n:::\n\n## Dealing with multicollinearity\n\n::: incremental\n-   Collect more data (often not feasible given practical constraints)\n\n-   Redefine the correlated predictors to keep the information from predictors but eliminate collinearity\n\n    -   e.g., if $x_1, x_2, x_3$ are correlated, use a new variable $(x_1 + x_2) / x_3$ in the model\n\n-   For categorical predictors, avoid using levels with very few observations as the baseline\n\n-   Remove one of the correlated variables\n\n    -   Be careful about substantially reducing predictive power of the model\n:::\n\n# Application exercise\n\n::: appex\n📋 [sta210-sp25.netlify.app/ae/ae-08-multicollinearity.html](../ae/ae-08-multicollinearity.html)\n\nPart 2\n:::\n\n## Recap\n\n-   Introduced multicollinearity\n\n    -   Definition\n\n    -   How it impacts the model\n\n    -   How to detect it\n\n    -   What to do about it\n\n## References\n",
    "supporting": [
      "13-multicollinearity_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}