{
  "hash": "769feefc50a058199bce75f3a24934c6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 01\"\nsubtitle: \"Simple linear regression\"\ndate: \"2025-01-27\"\ndate-format: \"MMM DD, YYYY\"\nfooter: \"[ðŸ”— STA 210 - Spring 2025](https://sta210-sp25.netlify.app)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs: \n    theme: slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    include-before: [ '<script type=\"text/x-mathjax-config\">MathJax.Hub.Config({tex2jax: {enableAssistiveMml: false}});</script>']\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:      \n    width: 200\nbibliography: references.bib\n---\n\n\n\n## Tips for working on lab\n\n-   You do not have to finish the lab in class, they will always be due **Thursday**. One work strategy is to get through portions that you think will be most challenging (which initially might be the coding component) during lab when a TA can help you on the spot and leave the narrative writing until later.\n\n-   Do not pressure each other to finish early (particularly once you start working on teams); use the time wisely to really learn the material and produce a quality report.\n\n## Tips: Axis labels and titles\n\n::: midi\nBelow is a graph of association between flipper length in millimeters and body mass in grams of three species of penguins in Palmer Station, Antarctica. What are informative title and axis labels for this graph?\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lab-01_files/figure-revealjs/unnamed-chunk-1-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n\n## Tips: Code style\n\nWhich code chunk would you rather read?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code chunk 1\npenguins|>filter(!is.na(flipper_length_mm))|>group_by(species)|>summarise(min=min(flipper_length_mm),mean=mean(flipper_length_mm),sd=sd(flipper_length_mm),max=max(flipper_length_mm),n=n())\n```\n:::\n\n\n\n<br>\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code chunk 2\npenguins |> \n  filter(!is.na(flipper_length_mm)) |> \n  group_by(species) |> \n  summarise(min = min(flipper_length_mm), \n            mean = mean(flipper_length_mm), \n            max = max(flipper_length_mm),\n            n = n())\n```\n:::\n\n\n\n## Tips: Code style cont'd\n\nMake code easier to read and debug by\n\n-   Putting each element on a different line (start a new line after `+` and `|>`)\n\n-   Putting spaces before and after operators (`+`, `-`, `*`, `=`, `|>` )\n\n-   In general, avoiding long lines of code, i.e. lines longer than 120 characters.\n\nSee the [Tidyverse Style Guide](https://style.tidyverse.org/) for more tips on code styling.\n\n## **When you're done with lab**\n\n-   Make sure all your final changes have been pushed to your GitHub repo\n-   Submit the PDF of your responses to [**Gradescope**](https://www.gradescope.com/)\n\n## Lab 01: Air temperature and ice duration\n\n-   Today's lab focuses on using linear regression to explore the relationship between air temperature and ice duration for two lakes in Wisconsin.\n\n-   There are markers throughout suggesting when to render, commit, and push changes to GitHub. These are to help you start using version control in your workflow.\n\n-   There are points for having a neatly formatted document and implementing a reproducible workflow\n\nðŸ”— [sta210-sp25.netlify.app/labs/lab-01.html](https://sta210-sp25.netlify.app/labs/lab-01.html)\n",
    "supporting": [
      "lab-01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}